import{_ as A}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,f as r,a as l,d as u,g as o,b as E,r as i,o as p}from"./app-BfT0IRkw.js";const B={};function e(s,t){const n=i("RouteLink");return p(),d("div",null,[t[95]||(t[95]=r('<h2 id="设计模式的六大原则" tabindex="-1"><a class="header-anchor" href="#设计模式的六大原则"><span>设计模式的六大原则</span></a></h2><p><strong>总原则——开闭原则（Open Closed Principle）</strong></p><blockquote><p>一个软件实体，如类、模块和函数应该<strong>对扩展开放，对修改关闭</strong>。</p></blockquote><p>在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类等。</p><p><strong>1、单一职责原则（Single Responsibility Principle）</strong></p><blockquote><p>一个类应该只有一个发生变化的原因。</p></blockquote><p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，否则就应该把类拆分。</p><p><strong>2、里氏替换原则（Liskov Substitution Principle）</strong></p><blockquote><p>所有引用基类的地方必须能透明地使用其子类的对象。</p></blockquote><p>任何基类可以出现的地方，子类一定可以出现。里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p><p>里氏代换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，<strong>子类对父类的方法尽量不要重写和重载</strong>。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p><p><strong>3、依赖倒置原则（Dependence Inversion Principle）</strong></p><blockquote><p>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。<br> 2、抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><blockquote><p>1、客户端不应该依赖它不需要的接口。<br> 2、类间的依赖关系应该建立在最小的接口上。</p></blockquote><p>每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p><p><strong>5、迪米特法则（最少知道原则）(Law of Demeter)</strong></p><blockquote><p>只与你的直接朋友交谈，不跟“陌生人”说话。</p></blockquote><p>一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p><p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><blockquote><p>尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的。</p></blockquote><p>合成或聚合可以将已有对象纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能。</p><h2 id="设计模式的三大类" tabindex="-1"><a class="header-anchor" href="#设计模式的三大类"><span>设计模式的三大类</span></a></h2><p><strong>创建型模式（Creational Pattern）：<strong>对类的实例化过程进行了抽象，能够将软件模块中</strong>对象的创建</strong>和对象的使用分离。</p>',27)),l("table",null,[t[20]||(t[20]=l("thead",null,[l("tr",null,[l("th",null,"中"),l("th",null,"英"),l("th",null,"使用频度"),l("th",null,"说明")])],-1)),l("tbody",null,[l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/Factory%20Method.html"},{default:o(()=>t[0]||(t[0]=[E("工厂模式")])),_:1})]),t[1]||(t[1]=l("td",null,"Factory Method",-1)),t[2]||(t[2]=l("td",null,"5",-1)),t[3]||(t[3]=l("td",null,"工厂方法设计模式定义了一个用于创建对象的接口，但让子类决定实例化哪个类。此模式允许类将实例化延迟到子类。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/Abstract%20Factory.html"},{default:o(()=>t[4]||(t[4]=[E("抽象工厂模式")])),_:1})]),t[5]||(t[5]=l("td",null,"Abstract Factory",-1)),t[6]||(t[6]=l("td",null,"5",-1)),t[7]||(t[7]=l("td",null,"抽象工厂设计模式提供了一个接口，用于创建相关或从属对象，而无需指定它们的具体类。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/Singleton.html"},{default:o(()=>t[8]||(t[8]=[E("单例模式")])),_:1})]),t[9]||(t[9]=l("td",null,"Singleton",-1)),t[10]||(t[10]=l("td",null,"4",-1)),t[11]||(t[11]=l("td",null,"Singleton设计模式确保一个类只有一个实例，并提供对它的全局访问点。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/Builder.html"},{default:o(()=>t[12]||(t[12]=[E("建造者模式")])),_:1})]),t[13]||(t[13]=l("td",null,"Builder",-1)),t[14]||(t[14]=l("td",null,"2",-1)),t[15]||(t[15]=l("td",null,"生成器设计模式将复杂对象的构造与其表示分离，以便相同的构造过程可以创建不同的表示。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/Prototype.html"},{default:o(()=>t[16]||(t[16]=[E("原型模式")])),_:1})]),t[17]||(t[17]=l("td",null,"Prototype",-1)),t[18]||(t[18]=l("td",null,"3",-1)),t[19]||(t[19]=l("td",null,"原型设计模式指定使用原型实例创建的对象类型，并通过复制此原型创建新对象。",-1))])])]),t[96]||(t[96]=l("p",null,[l("strong",null,"结构型模式（Structural Pattern）"),E("：关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像"),l("strong",null,"搭积木"),E("，可以通过简单积木的组合形成复杂的、功能更为强大的结构。")],-1)),l("table",null,[t[49]||(t[49]=l("thead",null,[l("tr",null,[l("th",null,"中"),l("th",null,"英"),l("th",null,"使用频度"),l("th",null,"说明")])],-1)),l("tbody",null,[l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/Adapter.html"},{default:o(()=>t[21]||(t[21]=[E("适配器模式")])),_:1})]),t[22]||(t[22]=l("td",null,"Adapter",-1)),t[23]||(t[23]=l("td",null,"4",-1)),t[24]||(t[24]=l("td",null,"适配器设计模式将类的接口转换为客户端期望的另一个接口。这种设计模式允许由于接口不兼容而无法正常工作的类协同工作。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/Decorator.html"},{default:o(()=>t[25]||(t[25]=[E("装饰者模式")])),_:1})]),t[26]||(t[26]=l("td",null,"Decorator",-1)),t[27]||(t[27]=l("td",null,"3",-1)),t[28]||(t[28]=l("td",null,"Decorator设计模式动态地将额外的职责附加到对象上。这种模式提供了一种灵活的替代子类化的方法来扩展功能。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/Proxy.html"},{default:o(()=>t[29]||(t[29]=[E("代理模式")])),_:1})]),t[30]||(t[30]=l("td",null,"Proxy",-1)),t[31]||(t[31]=l("td",null,"4",-1)),t[32]||(t[32]=l("td",null,"代理设计模式为另一个对象提供代理项或占位符，以控制对它的访问。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/Facade.html"},{default:o(()=>t[33]||(t[33]=[E("外观模式")])),_:1})]),t[34]||(t[34]=l("td",null,"Facade",-1)),t[35]||(t[35]=l("td",null,"5",-1)),t[36]||(t[36]=l("td",null,"1Facade设计模式为子系统中的一组接口提供统一接口。此模式定义了更高级别的接口，使子系统更易于使用。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/Bridge.html"},{default:o(()=>t[37]||(t[37]=[E("桥接模式")])),_:1})]),t[38]||(t[38]=l("td",null,"Bridge",-1)),t[39]||(t[39]=l("td",null,"2",-1)),t[40]||(t[40]=l("td",null,"桥接设计模式将抽象与其实现解耦，以便两者可以独立变化。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/Composite.html"},{default:o(()=>t[41]||(t[41]=[E("组合模式")])),_:1})]),t[42]||(t[42]=l("td",null,"Composite",-1)),t[43]||(t[43]=l("td",null,"4",-1)),t[44]||(t[44]=l("td",null,"复合设计模式将对象组合成树结构，以表示部分-整体层次结构。此模式允许客户端统一处理单个对象和对象的组成。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/Flyweight.html"},{default:o(()=>t[45]||(t[45]=[E("享元模式")])),_:1})]),t[46]||(t[46]=l("td",null,"Flyweight",-1)),t[47]||(t[47]=l("td",null,"1",-1)),t[48]||(t[48]=l("td",null,"Flyweight设计模式使用共享来高效地支持大量细粒度对象。",-1))])])]),t[97]||(t[97]=l("p",null,[l("strong",null,"行为型模式（Behavioral Pattern）"),E("：关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的"),l("strong",null,"相互作用"),E("。")],-1)),l("table",null,[t[94]||(t[94]=l("thead",null,[l("tr",null,[l("th",null,"中"),l("th",null,"英"),l("th",null,"使用频度"),l("th",null,"说明")])],-1)),l("tbody",null,[l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/Strategy.html"},{default:o(()=>t[50]||(t[50]=[E("策略模式")])),_:1})]),t[51]||(t[51]=l("td",null,"Strategy",-1)),t[52]||(t[52]=l("td",null,"5",-1)),t[53]||(t[53]=l("td",null,"策略设计模式定义了一系列算法，封装了每一个算法，并使它们可以互换。此模式允许算法独立于使用它的客户端而变化。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/Template%20Method.html"},{default:o(()=>t[54]||(t[54]=[E("模板方法模式")])),_:1})]),t[55]||(t[55]=l("td",null,"Template Method",-1)),t[56]||(t[56]=l("td",null,"3",-1)),t[57]||(t[57]=l("td",null,"模板方法设计模式定义操作中算法的框架，将某些步骤推迟到子类。此模式允许子类在不改变算法结构的情况下重新定义算法的某些步骤。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/Observer.html"},{default:o(()=>t[58]||(t[58]=[E("观察者模式")])),_:1})]),t[59]||(t[59]=l("td",null,"Observer",-1)),t[60]||(t[60]=l("td",null,"5",-1)),t[61]||(t[61]=l("td",null,"观察者设计模式定义了对象之间的一对多依赖关系，以便当一个对象更改状态时，自动通知并更新其所有依赖项。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/Iterator.html"},{default:o(()=>t[62]||(t[62]=[E("迭代器模式")])),_:1})]),t[63]||(t[63]=l("td",null,"Iterator",-1)),t[64]||(t[64]=l("td",null,"5",-1)),t[65]||(t[65]=l("td",null,"迭代器设计模式提供了一种顺序访问聚合对象元素的方法，而无需公开其底层表示。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/Chain%20of%20Resp.html"},{default:o(()=>t[66]||(t[66]=[E("责任链模式")])),_:1})]),t[67]||(t[67]=l("td",null,"Chain of Resp.",-1)),t[68]||(t[68]=l("td",null,"2",-1)),t[69]||(t[69]=l("td",null,"责任链设计模式为多个对象提供了处理请求的机会，从而避免了将请求的发送方与其接收方耦合。该模式将接收对象链接起来，并沿着该链传递请求，直到对象处理它为止。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/Command.html"},{default:o(()=>t[70]||(t[70]=[E("命令模式")])),_:1})]),t[71]||(t[71]=l("td",null,"Command",-1)),t[72]||(t[72]=l("td",null,"4",-1)),t[73]||(t[73]=l("td",null,"命令设计模式将请求封装为对象，从而使您能够使用不同的请求、队列或日志请求参数化客户端，并支持可撤消的操作。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/Memento.html"},{default:o(()=>t[74]||(t[74]=[E("备忘录模式")])),_:1})]),t[75]||(t[75]=l("td",null,"Memento",-1)),t[76]||(t[76]=l("td",null,"1",-1)),t[77]||(t[77]=l("td",null,"Memento设计模式在不违反封装的情况下捕获并外部化对象的内部状态，以便稍后可以将对象恢复到该状态。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/State.html"},{default:o(()=>t[78]||(t[78]=[E("状态模式")])),_:1})]),t[79]||(t[79]=l("td",null,"State",-1)),t[80]||(t[80]=l("td",null,"3",-1)),t[81]||(t[81]=l("td",null,"状态设计模式允许对象在其内部状态更改时改变其行为。对象将显示为更改其类。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/Visitor.html"},{default:o(()=>t[82]||(t[82]=[E("访问者模式")])),_:1})]),t[83]||(t[83]=l("td",null,"Visitor",-1)),t[84]||(t[84]=l("td",null,"1",-1)),t[85]||(t[85]=l("td",null,"访问者设计模式表示对对象结构的元素执行的操作。此模式允许您定义新操作，而无需更改其操作的元素的类。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/Mediator.html"},{default:o(()=>t[86]||(t[86]=[E("中介者模式")])),_:1})]),t[87]||(t[87]=l("td",null,"Mediator",-1)),t[88]||(t[88]=l("td",null,"2",-1)),t[89]||(t[89]=l("td",null,"中介设计模式定义了一个对象，该对象封装了一组对象如何交互。Mediator通过防止对象彼此显式引用来促进松散耦合，并允许您独立地改变它们的交互。",-1))]),l("tr",null,[l("td",null,[u(n,{to:"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/Interpreter.html"},{default:o(()=>t[90]||(t[90]=[E("解释器模式")])),_:1})]),t[91]||(t[91]=l("td",null,"Interpreter",-1)),t[92]||(t[92]=l("td",null,"1",-1)),t[93]||(t[93]=l("td",null,"给定一种语言，解释器设计模式为其语法定义了一种表示形式，同时定义了一个解释器，该解释器使用这种表示形式来解释该语言中的句子。",-1))])])])])}const F=A(B,[["render",e],["__file","index.html.vue"]]),C=JSON.parse('{"path":"/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","description":"设计模式的六大原则 总原则——开闭原则（Open Closed Principle） 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。 在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。 想要达到这样的效果，我们需要使用接口和抽象类等。 1、单一...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/vuepress-starter/guide/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式的六大原则 总原则——开闭原则（Open Closed Principle） 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。 在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。 想要达到这样的效果，我们需要使用接口和抽象类等。 1、单一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-10T08:55:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-10T08:55:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-10T08:55:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"设计模式的六大原则","slug":"设计模式的六大原则","link":"#设计模式的六大原则","children":[]},{"level":2,"title":"设计模式的三大类","slug":"设计模式的三大类","link":"#设计模式的三大类","children":[]}],"git":{"createdTime":1733820951000,"updatedTime":1733820951000,"contributors":[{"name":"cyoukon","username":"cyoukon","email":"z1162289133@gmail.com","commits":1,"url":"https://github.com/cyoukon"}]},"readingTime":{"minutes":8.37,"words":2511},"filePathRelative":"guide/设计模式/README.md","localizedDate":"2024年12月10日","autoDesc":true}');export{F as comp,C as data};
