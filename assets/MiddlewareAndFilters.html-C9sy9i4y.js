import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,f as o,o as a}from"./app-BfT0IRkw.js";const n="/vuepress-starter/assets/request-delegate-pipeline.pngview_aspnetcore-5.0-DOHqyL9F.png",i="/vuepress-starter/assets/middleware-pipeline.svgview_aspnetcore-5.0-B2RCDbge.svg",s="/vuepress-starter/assets/filter-pipeline-2.pngview_aspnetcore-5.0-C5d2Dg5L.png",l={};function c(d,e){return a(),r("div",null,e[0]||(e[0]=[o('<h2 id="中间件和过滤器" tabindex="-1"><a class="header-anchor" href="#中间件和过滤器"><span>中间件和过滤器</span></a></h2><h3 id="_1-区别" tabindex="-1"><a class="header-anchor" href="#_1-区别"><span>1. 区别</span></a></h3><ul><li>**中间件：**一般将一些跟业务无关的功能放到中间件中，如 打印web请求与响应日志、全局异常处理等。</li><li>**过滤器：**更贴合业务，业务相关功能放到过滤器中，如 验证请求参数等。</li></ul><h3 id="_2-中间件" tabindex="-1"><a class="header-anchor" href="#_2-中间件"><span>2. 中间件</span></a></h3><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">官方文档：ASP.NET Core 中间件</a></p><h4 id="_2-1-顺序" tabindex="-1"><a class="header-anchor" href="#_2-1-顺序"><span>2.1 顺序</span></a></h4><p><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core 请求管道包含一系列请求委托，依次调用。 下图演示了这一概念。 沿黑色箭头执行。</p><figure><img src="'+n+'" alt="请求处理模式显示请求到达、通过三个中间件进行处理以及响应离开应用。 每个中间件运行其逻辑，并在 next() 语句处将请求传递到下一个中间件。 在第三个中间件处理请求之后，请求按相反顺序返回通过前两个中间件，以进行离开应用前并在其 next() 语句后的其他处理，作为对客户端的响应。" tabindex="0" loading="lazy"><figcaption>请求处理模式显示请求到达、通过三个中间件进行处理以及响应离开应用。 每个中间件运行其逻辑，并在 next() 语句处将请求传递到下一个中间件。 在第三个中间件处理请求之后，请求按相反顺序返回通过前两个中间件，以进行离开应用前并在其 next() 语句后的其他处理，作为对客户端的响应。</figcaption></figure><p>下图显示了 <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core MVC 和 Razor Pages 应用的完整请求处理管道。 你可以在典型应用中了解现有中间件的顺序，以及在哪里添加自定义中间件。 你可以完全控制如何重新排列现有中间件，或根据场景需要注入新的自定义中间件。</p><figure><img src="'+i+'" alt="ASP.NET Core 中间件管道" tabindex="0" loading="lazy"><figcaption><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core 中间件管道</figcaption></figure><h3 id="_3-过滤器" tabindex="-1"><a class="header-anchor" href="#_3-过滤器"><span>3. 过滤器</span></a></h3><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0" target="_blank" rel="noopener noreferrer">官方文档：ASP.NET Core 中的筛选器</a></p><h4 id="_3-1-过滤器类型" tabindex="-1"><a class="header-anchor" href="#_3-1-过滤器类型"><span>3.1 过滤器类型</span></a></h4><blockquote><p><a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core有以下5中筛选器类型，下表列出的接口仅有同步版本，异步版本在前面加<code>Async</code>(<code>IAsyncAuthorizationFilter</code>)即可。</p></blockquote><table><thead><tr><th>过滤器类型</th><th>接口</th><th>默认实现</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0#authorization-filters" target="_blank" rel="noopener noreferrer">授权筛选器</a></td><td>IAuthorizationFilter</td><td>AuthorizeAttribute</td><td style="text-align:left;">最先运行，用于确定是否已针对请求为用户授权。 如果请求未获授权，授权筛选器可以让管道短路。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0#resource-filters" target="_blank" rel="noopener noreferrer">资源筛选器</a></td><td>IResourceFilter</td><td>-</td><td style="text-align:left;">授权后运行。 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresourcefilter.onresourceexecuting" target="_blank" rel="noopener noreferrer">OnResourceExecuting</a> 在筛选器管道的其余阶段之前运行代码。 例如，<code>OnResourceExecuting</code> 在模型绑定之前运行代码。 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.aspnetcore.mvc.filters.iresourcefilter.onresourceexecuted" target="_blank" rel="noopener noreferrer">OnResourceExecuted</a> 在管道的其余阶段完成之后运行代码。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0#action-filters" target="_blank" rel="noopener noreferrer">操作筛选器</a></td><td>IActionFilter</td><td>ActionFilterAttribute</td><td style="text-align:left;">在调用操作方法之前和之后立即运行代码。 可以更改传递到操作中的参数。 可以更改从操作返回的结果。 Pages 中 Razor 不支持 。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0#exception-filters" target="_blank" rel="noopener noreferrer">异常筛选器</a></td><td>IExceptionFilter</td><td>HandleErrorAttribute</td><td style="text-align:left;">在向响应正文写入任何内容之前，对未经处理的异常应用全局策略。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters?view=aspnetcore-5.0#result-filters" target="_blank" rel="noopener noreferrer">结果筛选器</a></td><td>IResultFilter</td><td>ActionFilterAttribute</td><td style="text-align:left;">在执行操作结果之前和之后立即运行代码。 仅当操作方法成功执行时，它们才会运行。</td></tr></tbody></table><h4 id="_3-2-顺序" tabindex="-1"><a class="header-anchor" href="#_3-2-顺序"><span>3.2 顺序</span></a></h4><p>下图展示了筛选器类型在筛选器管道中的交互方式。</p><figure><img src="'+s+'" alt="请求通过授权过滤器、资源过滤器、模型绑定、操作过滤器、操作执行和操作结果转换、异常过滤器、结果过滤器和结果执行进行处理。 返回时，请求仅由结果过滤器和资源过滤器进行处理，变成发送到客户端的响应。" tabindex="0" loading="lazy"><figcaption>请求通过授权过滤器、资源过滤器、模型绑定、操作过滤器、操作执行和操作结果转换、异常过滤器、结果过滤器和结果执行进行处理。 返回时，请求仅由结果过滤器和资源过滤器进行处理，变成发送到客户端的响应。</figcaption></figure>',18)]))}const f=t(l,[["render",c],["__file","MiddlewareAndFilters.html.vue"]]),m=JSON.parse('{"path":"/guide/ASP.NET/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/MiddlewareAndFilters.html","title":"","lang":"zh-CN","frontmatter":{"description":"中间件和过滤器 1. 区别 **中间件：**一般将一些跟业务无关的功能放到中间件中，如 打印web请求与响应日志、全局异常处理等。 **过滤器：**更贴合业务，业务相关功能放到过滤器中，如 验证请求参数等。 2. 中间件 官方文档：ASP.NET Core 中间件 2.1 顺序 ASP.NET Core 请求管道包含一系列请求委托，依次调用。 下图演示...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/vuepress-starter/guide/ASP.NET/%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/MiddlewareAndFilters.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:description","content":"中间件和过滤器 1. 区别 **中间件：**一般将一些跟业务无关的功能放到中间件中，如 打印web请求与响应日志、全局异常处理等。 **过滤器：**更贴合业务，业务相关功能放到过滤器中，如 验证请求参数等。 2. 中间件 官方文档：ASP.NET Core 中间件 2.1 顺序 ASP.NET Core 请求管道包含一系列请求委托，依次调用。 下图演示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-10T13:11:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-10T13:11:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-10T13:11:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"中间件和过滤器","slug":"中间件和过滤器","link":"#中间件和过滤器","children":[{"level":3,"title":"1. 区别","slug":"_1-区别","link":"#_1-区别","children":[]},{"level":3,"title":"2. 中间件","slug":"_2-中间件","link":"#_2-中间件","children":[]},{"level":3,"title":"3. 过滤器","slug":"_3-过滤器","link":"#_3-过滤器","children":[]}]}],"git":{"createdTime":1733820951000,"updatedTime":1733836306000,"contributors":[{"name":"zhaokun","username":"zhaokun","email":"1162289133@qq.com","commits":1,"url":"https://github.com/zhaokun"},{"name":"cyoukon","username":"cyoukon","email":"z1162289133@gmail.com","commits":1,"url":"https://github.com/cyoukon"}]},"readingTime":{"minutes":2.79,"words":837},"filePathRelative":"guide/ASP.NET/中间件与过滤器/MiddlewareAndFilters.md","localizedDate":"2024年12月10日","autoDesc":true}');export{f as comp,m as data};
